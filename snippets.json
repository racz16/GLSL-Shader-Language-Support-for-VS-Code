{
    "# version": {
        "prefix": "# version",
        "body": "#version ${1|460,450,440,430,420,410,400,330,320,310,300,150,140,130,120,110|} ${2|core,es,compatibility|}",
        "description": "Creates the version declaration"
    },
    "# extension": {
        "prefix": "# extension",
        "body": "#extension ${1:extension_name} : ${2|require,enable,warn,disable|}",
        "description": "Creates an extension directive"
    },
    "# define object like macro": {
        "prefix": "# object like macro",
        "body": "#define ${1:MACRO_NAME} ${2:1}",
        "description": "Creates an object-like macro"
    },
    "# define function like macro": {
        "prefix": "# function like macro",
        "body": "#define ${1:MACRO_NAME}(${2:x}) ${3:x}",
        "description": "Creates a function-like macro"
    },
    "# undef": {
        "prefix": "# undef",
        "body": "#undef ${1:MACRO_NAME}",
        "description": "Creates a macro undef"
    },
    "# if": {
        "prefix": "# if",
        "body": ["#if ${1:true}", "\t$0", "#endif"],
        "description": "Creates #if and #endif preprocessor directives"
    },
    "# ifdef": {
        "prefix": "# ifdef",
        "body": ["#ifdef ${1:MACRO_NAME}", "\t$0", "#endif"],
        "description": "Creates #ifdef and #endif preprocessor directives"
    },
    "# ifndef": {
        "prefix": "# ifndef",
        "body": ["#ifndef ${1:MACRO_NAME}", "\t$0", "#endif"],
        "description": "Creates #ifndef and #endif preprocessor directives"
    },
    "# error": {
        "prefix": "# error",
        "body": "#error ${1:This is the error message}",
        "description": "Creates an error directive"
    },
    "# pragma": {
        "prefix": "# pragma",
        "body": "#pragma ${1|optimize,debug|}(${2|on,off|})",
        "description": "Creates a pragma directive"
    },
    "function": {
        "prefix": "function",
        "body": ["${1:void} ${2:function}($3) {", "\t$0", "}"],
        "description": "Creates a function"
    },
    "main function": {
        "prefix": "main function",
        "body": ["void main() {", "\t$0", "}"],
        "description": "Creates the main function"
    },
    "if": {
        "prefix": "if",
        "body": ["if(${1:true}) {", "\t$0", "}"],
        "description": "Creates an if statement"
    },
    "if else": {
        "prefix": "if else",
        "body": ["if(${1:true}) {", "\t$0", "} else {", "\t", "}"],
        "description": "Creates an if-else statement"
    },
    "if float": {
        "prefix": "if float",
        "body": ["if(${1:value} < ${2:0.0001f} && ${1:value} > ${3:-0.0001f}) {", "\t$0", "}"],
        "description": "Creates a float comparison if statement"
    },
    "for": {
        "prefix": "for",
        "body": ["for(${1:int} ${2:i} = ${3:0}; ${2:i} < ${4:16}; ${2:i}++) {", "\t$0", "}"],
        "description": "Creates a for loop"
    },
    "while": {
        "prefix": "while",
        "body": ["while(${1:true}) {", "\t$0", "}"],
        "description": "Creates a while loop"
    },
    "do while": {
        "prefix": "do while",
        "body": ["do {", "\t$0", "} while(${1:true});"],
        "description": "Creates a do while loop"
    },
    "struct": {
        "prefix": "struct",
        "body": ["struct ${1:TypeName} {", "\t${2:float} ${3:variableName};$0", "};"],
        "description": "Creates a struct"
    },
    "variable declaration": {
        "prefix": "variable declaration",
        "body": "${1:float} ${2:variableName};",
        "description": "Creates a variable declaration"
    },
    "variable initialization": {
        "prefix": "variable initialization",
        "body": "${1:float} ${2:variableName} = ${3:0};",
        "description": "Creates a variable initialization"
    },
    "precision statement": {
        "prefix": "precision statement",
        "body": "precision ${1|highp,mediump,lowp|} ${2:float};",
        "description": "Creates a precision statement"
    },
    "switch case": {
        "prefix": "switch case",
        "body": ["switch(${1:variableName}) {", "\tcase ${2:1}: $3", "\tdefault: $4", "}"],
        "description": "Creates a switch case statement"
    },
    "interface block": {
        "prefix": "interface block",
        "body": ["${1|uniform,in,out,buffer|} ${2:InterfaceBlockName} {", "\t${3:float} ${4:variableName};$0", "};"],
        "description": "Creates an interface block"
    },
    "subroutine function": {
        "prefix": "subroutine function",
        "body": [
            "subroutine ${1:void} ${2:SubroutineTypeName}($3);",
            "",
            "subroutine($2) $1 ${4:functionName}($3) {",
            "\t$0",
            "}"
        ],
        "description": "Creates a subroutine function"
    },
    "attribute variable declaration": {
        "prefix": "attribute variable declaration",
        "body": "layout(location = ${1:0}) in ${2:vec3} ${3:variableName};",
        "description": "Creates a vertex attribute"
    },
    "tessellation control output": {
        "prefix": "tessellation control output",
        "body": "layout(vertices = ${1:3}) out;",
        "description": "Creates a layout qualifier with the tessellation control shader output"
    },
    "tessellation evaluation input": {
        "prefix": "tessellation evaluation input",
        "body": "layout(${1|triangles,quads,isolines|}, ${2|equal_spacing,fractional_odd_spacing,fractional_even_spacing|}, ${3|ccw,cw|}) in;",
        "description": "Creates a layout qualifier with the tessellation evaluation shader input"
    },
    "geometry input": {
        "prefix": "geometry input",
        "body": "layout(${1|triangles,lines,points,triangles_adjacency,lines_adjacency|}) in;",
        "description": "Creates a layout qualifier with the geometry shader input"
    },
    "geometry output": {
        "prefix": "geometry output",
        "body": "layout(${1|triangle_strip,line_strip,points|}, max_vertices = ${2:3}) in;",
        "description": "Creates a layout qualifier with the geometry shader output"
    },
    "compute local size": {
        "prefix": "compute local size",
        "body": "layout(local_size_x = ${1:64}, local_size_y = ${2:64}, local_size_z = ${3:1}) in;",
        "description": "Creates a layout qualifier with local sizes"
    }
}
